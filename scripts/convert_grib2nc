#!/usr/bin/env python

import argparse
import os
from datetime import datetime

import pandas as pd

from weather_forecast_retrieval import utils
from weather_forecast_retrieval.grib2nc import grib2nc


def run(config_file, start_date):

    if os.path.isfile(config_file):
        config = utils.read_config(config_file)

        # parse the rest of the config file
        output_dir = config['output']['output_dir']
        output_nc = config['output']['output_nc']

        # get the date
        ex_date = datetime.date(pd.to_datetime(start_date))
        date_folder = 'hrrr.{}'.format(ex_date.strftime('%Y%m%d'))

        log_config = None
        if 'grib2nc_log' in config['logging']:
            log_config = {
                'logging': {
                    'log_file': config['logging']['grib2nc_log'],
                    'log_level': 'ERROR',
                }
            }

        log = utils.setup_local_logger('grib2nc', log_config)

        msg = "GRIB2NC Converter Utility"
        log.info(msg)
        log.info("=" * len(msg))
        log.info('Started {}'.format(datetime.utcnow().isoformat()))

        # create the hrrr grib2 output path
        grib2_path = os.path.join(output_dir, date_folder)
        if not os.path.isdir(grib2_path):
            log.warning('Grib2 path does not exist {}'.format(grib2_path))
            return True

        # make and check the netcdf path
        nc_path = os.path.join(output_nc, date_folder)
        if not os.path.isdir(nc_path):
            os.mkdir(nc_path)

        # look for all files in a directory
        files = os.listdir(grib2_path)
        for f in files:
            try:
                grib_file = os.path.join(grib2_path, f)
                nc_file = os.path.join(nc_path, ".".join(f.split(".")[0:-1]) + ".nc")
                grib2nc(grib_file, nc_file, log)
            except Exception as e:
                log.warning('Error converting {}'.format(f))

        log.info('Finished {}'.format(datetime.utcnow().isoformat()))

    else:
        raise IOError('Config file does not exist.')


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description='Convert folder of HRRR grib2 files to netcdf')
    parser.add_argument('config_file', metavar='config_file', type=str,
                        help='Path to config file')

    parser.add_argument('-s', '--start', dest='start_date',
                        required=True, default=None,
                        help='Date to convert')

    args = parser.parse_args()

    run(args.config_file, args.start_date.strip())
